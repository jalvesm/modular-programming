Ex2) CONTA DE FATURAMENTO (FATURA)
-> emitir conta de faturamento 

Conta de faturamento possui:
-> identificador da unidade faturada (dado)
-> leitura do relógio atual (dado)
-> leitura do relógio do mês anterior (dado)

-> Calcular consumo da unidade: 
        consumoEmKWh = (leitura do relógio atual - leitura do relógio do mês anterior);  
-> calcular valor total da fatura (preço a pagar pelo titular da conta):
                valor do consumo = total consumo em KWh * 0,79
                taxa de iluminação publica = R$12,75 
                valor parcial = taxa de iluminação + valor do consumo
                imposto = 0,18 * valor parcial

- MÉTODOS
+ getIdCliente()
+ getIdentificadorUnidade()
+ getLeituraRelogioMesAnterior(Int idUnidade, Int idCliente)
+ getLeituraRelogioMesVigente(Int idUnidade, Int idCliente)
+ calculaConsumoDeEnergia(Double leituraRelogioMesVigente, Double leituraRelogioMesAnterior): Double
+ calculaConsumoEmReais(Double totalConsumoEmKwh): Double
+ calculaValorParcialDaFatura(Double valorConsumoEmReais): Double
+ calculaImposto(Double valorParcialDaFatura): Double
+ calculaFatura(): Double

DADOS
- VALORKWH: Double                    // 0.79
- TAXAILUMINACAOPUBLICA: Double       // 12.75
- TAXAIMPOSTO: Double                 // 0.18
- idUnidade: Int
- idCliente: Int
- leituraRelogioMesVigente: Double
- leituraRelogioMesAnterior: Double 
- totalConsumoEmKwh: Double
- valorConsumoEmReais: Double 
- valorParcialDaFatura: Double
- valorTotalFatura: Double


Ex3)

classe PARTIDA

static quartoVigente
static int[] pontuacaoEquipeA;
static int[] pontuacaoEquipeB;

// AÇÕES

-> RecolherInputUsuário()
        retorna dadoInputado

-> Marcar pontuação()
        Para cada contadorQuarto++ em 5
                mensagem: "Pontuação Equipe $equipe"
                pontuacaoEquipe[i] = RecolherInputUsuário();
                contadorQuarto++
        retorna pontuaçaoEquipe[]

-> Somar pontuação final(int[] array)
        for (int i = 0; i <= len.array; i++)
                soma
                return somaDoVetor

-> Somar pontuação()
        Para cada posição do vetor da equipe
                soma o valor e armazena na soma
        retorna soma

-> Define equipe vencedora()
        int somaA = Somar pontuação(EquipeA)
        int somaB = Somar pontuação(EquipeB)

        Se (somaA > somaB)
                imprime "Equipe vencedora: A"
                Imprimir placar()
        senãose
                imprime "Equipe vencedora: B"
                Imprimir placar()
        senão 
                imprime Redirecionando prorrogação:
                Marcar pontuação Prorrogação(somaA, somaB)
        FIM

-> Marcar pontuação Prorrogação(somaA, somaB)
        int numProrrogação = 5
        Enquanto somaA for igual a somaB        
                Marcar pontuação(numProrrogação)
                numProrrogação++
                Define equipe vencedora()
        FIM

-> Imprime vetor()
        Para (cada posição do vetor)
                imprime posição

-> Imprimir placar()
        imprime vetor (Periodos)
        imprime vetor (Equipe A)
        imprime vetor (Equipe B)

-> Main()
        input: Adicionar pontuação:
        EquipeA = Marcar pontuação()
        EquipeB = Marcar pontuação()

        Define equipe vencedora()
        
        FIM

SUBSTANTIVOS
DADOS
-> Soma da Pontuação da Equipe A: 
-> Soma da Pontuação da Equipe B
-> Periodos = [ , Q1, Q2, Q3, Q4, PR, ...]
-> pontuação Equipe A
-> pontuação Equipe B
-> equipe vencedora

Problemas: como armazenar na última posição do vetorA a soma de todas as posições do vetorA? 
